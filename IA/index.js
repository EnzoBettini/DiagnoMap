import express from 'express';
import axios from 'axios';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

dotenv.config();
console.log('[DEBUG] OPENAI_API_KEY carregada?', !!process.env.OPENAI_API_KEY);
console.log('[DEBUG] OPENAI_MODEL:', process.env.OPENAI_MODEL);

const app = express();
app.use(cors());
app.use(express.json());

// Caminho absoluto do diretÃ³rio atual
const __dirname = path.dirname(fileURLToPath(import.meta.url));

// Serve arquivos estÃ¡ticos da pasta atual
app.use(express.static(__dirname));

// PÃ¡gina principal
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// PopulaÃ§Ã£o estimada de MaringÃ¡-PR (2024)
const POPULACAO_MARINGA = 425983;

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_MODEL = process.env.OPENAI_MODEL;

// Endpoint para processar dados de saÃºde
app.post('/analise', async (req, res) => {
    const { dados } = req.body;
    if (!Array.isArray(dados)) {
        return res.status(400).json({ error: 'Formato invÃ¡lido. Envie um array de dados.' });
    }

    // Agrupa casos por doenÃ§a e bairro
    const casos = {}; // casos[doenca][bairro] = contagem
    dados.forEach(({ endereco, diagnostico }) => {
        const parts = endereco.split(',');
        const bairro = parts[1]?.trim() || parts[0]?.trim() || 'NÃ£o informado';
        if (!casos[diagnostico]) casos[diagnostico] = {};
        casos[diagnostico][bairro] = (casos[diagnostico][bairro] || 0) + 1;
    });

    // Prepara resumo para o prompt
    const linhasResumo = [];
    Object.entries(casos).forEach(([doenca, bairros]) => {
        Object.entries(bairros).forEach(([bairro, contagem]) => {
            linhasResumo.push(`- ${doenca} | ${bairro}: ${contagem} caso(s)`);
        });
    });
    const resumoCasos = linhasResumo.join('\n');

    // ConstrÃ³i prompt para a OpenAI
    const prompt = `Contexto: MaringÃ¡, ParanÃ¡, populaÃ§Ã£o estimada em ${POPULACAO_MARINGA} habitantes.
VocÃª Ã© um agente de saÃºde pÃºblica local. A seguir, dados de casos por doenÃ§a e bairro em MaringÃ¡:

${resumoCasos}

Tarefa:
1. Identifique as 2 combinaÃ§Ãµes (doenÃ§a + bairro) com MAIOR incidÃªncia.
2. Para cada uma:
   - Indique a possÃ­vel causa do aumento de casos e incidencia a cada cem mil habitantes.
   - Sugira uma aÃ§Ã£o de mitigaÃ§Ã£o, com base na causa e na populaÃ§Ã£o do bairro.
   - FaÃ§a uma estimativa percentual de reduÃ§Ã£o de futuros casos se a aÃ§Ã£o for implementada.
   - Calcule, com base na populaÃ§Ã£o do bairro (proporcional Ã  populaÃ§Ã£o total de MaringÃ¡), quantos habitantes poderiam ser alcanÃ§ados POR AÃ‡ÃƒO DE MITIGAÃ‡ÃƒO POR DOENÃ‡A.
   - caso voce nao consiga calcular a populaÃ§Ã£o por bairro, estime. MaringÃ¡ possui mais de 250 microregiÃµes e bairros. AnÃ¡lise e faÃ§a uma estimativa com base no TAMANHO de cada bairro.
   - NÃ£o colocar estimaÃ§Ãµes sem base ou mitigaÃ§Ãµes sem base.
   - NÃ£o colocar mitigaÃ§Ãµes que nÃ£o sejam possÃ­veis de serem implementadas.
   - NÃ£o colocar numero da populaÃ§Ã£o do bairro, apenas utilize para seu prÃ³prio calculo.
   - Caso seja enviado apenas uma pessoa vamos considerar que para cada pessoa enviada temos mais 10 em cada bairro.
   - NÃ£o colocar a populaÃ§Ã£o alcanÃ§ada, apenas a estimativa de reduÃ§Ã£o de casos com base na populaÃ§Ã£o do bairro (nÃ£o cite a populaÃ§ao apenas a %).
   - VocÃª Ã© apenas uma IA de demonstraÃ§Ã£o, entÃ£o se sÃ³ vier por exemplo 1 pessoa, vamos considerar que para cada pessoa enviada temos mais 15 infectadas em cada bairro.
   - explique o porque da causa e da mitigaÃ§Ã£o e o porque da estimativa de reduÃ§Ã£o de casos.
   - O porque da estimativa na reduÃ§Ã£o de casos deve informar dados reais do porque do numero da reduÃ§Ã£o.

Formate a resposta como um ARRAY JSON, com objetos contendo:
[
  {
    "doenca": string,
    "bairro": string,
    "causa_possivel": string,
    "mitigacao": string,
    "pq_mitiga": string,
    "estimativa_reducao_percentual": string,
    "pq_da_estimativa_reducao_percentual": string,
  },
  ...
]
`;

    try {
        const aiRes = await axios.post(
            'https://api.openai.com/v1/chat/completions',
            {
                model: OPENAI_MODEL,
                messages: [{ role: 'user', content: prompt }]
            },
            {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${OPENAI_API_KEY}`
                }
            }
        );

        const text = aiRes.data.choices[0].message.content;
        let recomendacoes;
        try {
            recomendacoes = JSON.parse(text);
        } catch (e) {
            // Retorna texto cru se JSON invÃ¡lido
            return res.json({ raw: text });
        }
        res.json({ recomendacoes });

    } catch (error) {
        console.error('ðŸ’¥ ERRO em /analise:', error.response?.status, error.response?.data || error.message);
        if (error.response && error.response.status === 429) {
            return res.json({
                recomendacoes: [
                    { doenca: 'Dengue', bairro: 'Centro', casos: 0, causa_possivel: '', mitigacao: '', estimativa_reducao_percentual: '0%', populacao_alcancada: 0 }
                ]
            });
        }
        res.status(500).json({ error: 'Erro ao consultar a API OpenAI', details: error.message });
    }
});

// Inicializa o servidor
app.listen(3001, () => {
    console.log('Agente de IA rodando em http://localhost:3001');
});
